//Question: https://leetcode.com/problems/climbing-stairs/description/

//Code:
1. RECURSION: giving TLE

class Solution {
public:
    int solve(int n){
        if(n==0 || n==1)    return 1;
        return solve(n-1)+solve(n-2);
    }
    int climbStairs(int n) {
        return solve(n);
    }
};
_______________________________________

2. MEMOIZATION: to down

class Solution {
public:
    int solve(int n,vector<int>&v){
        if(n==0 || n==1)    return 1;
        if(v[n]!=0) return v[n];
        v[n]=solve(n-1,v)+solve(n-2,v);
        return v[n];
    }
    int climbStairs(int n) {
        vector<int>v(n+1,0);
        return solve(n,v);
    }
};
______________________________________

3. NORMAL DP:

class Solution {
public:
    int climbStairs(int n) {
        if(n==1)    return 1;
        int a=1,b=1,c=0;
        for(int i=0;i<n-1;i++){
            c=a+b;
            b=a;
            a=c;
        }
        return c;
    }
};

//TC: O(N)

//Approach:  DP
