//Question: https://leetcode.com/problems/house-robber/description/

//Code:

1. RECURSION: TLE :(

class Solution {
public:
    int solve(vector<int>&v,int i){
        if(i>=v.size()) return 0;
        int include=v[i]+solve(v,i+2);
        int exclude=solve(v,i+1);
        return max(include,exclude);
    }
    int rob(vector<int>& nums) {
        return solve(nums,0);
    }
};
____________________________________________________

2. MEMO:

class Solution {
public:
    vector<int> memo;
    int solve(vector<int>& v,int i){
        if(i>=v.size())   return 0;
        if(memo[i]!=-1) return memo[i];
        int include=v[i]+solve(v,i+2);
        int exclude=solve(v,i+1);
        return memo[i]=max(include,exclude);
    }
    int rob(vector<int>& nums) {
        memo.resize(nums.size(),-1);
        return solve(nums, 0);
    }
};
__________________________________________________
3. BOTTOM UP DP:
class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        if (n == 0) return 0;
        if (n == 1) return nums[0];
        vector<int> dp(n + 1, 0);
        dp[0] = 0;
        dp[1] = nums[0];
        for (int i = 2; i <= n; ++i) {
            dp[i] =max(nums[i - 1] + dp[i - 2], dp[i - 1]);
        }
        return dp[n];
    }
};

//TC: O(n)

//Approach: DP
