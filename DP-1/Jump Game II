//Question: https://leetcode.com/problems/jump-game-ii/description/

//Code:

1. RECURSION: giving TLE

class Solution {
public:
    int solve(vector<int>&v,int p){
        int n=v.size();
        if(p>=n-1) return 0;
        int j=INT_MAX;
        for(int i=1;i<=v[p];i++){
            j=min(j,solve(v,p+i));
        }
        return j==INT_MAX?INT_MAX:j+1;
    }
    int jump(vector<int>& nums) {
        return solve(nums,0);
    }
};
_______________________________________

2. MEMO:

class Solution {
public:
    int solve(vector<int>&v,int p,vector<int>&memo){
        int n=v.size();
        if(p>=n-1) return 0;
        if(memo[p]!=0) return memo[p];
        int j=INT_MAX;
        for(int i=1;i<=v[p];i++){
            j=min(j,solve(v,p+i,memo));
        }
        memo[p]=j==INT_MAX?INT_MAX:j+1;
        return memo[p];
    }
    int jump(vector<int>& nums) {
        vector<int>memo(nums.size(),0);
        return solve(nums,0,memo);
    }
};
___________________________________________

3. NORMAL DP:

class Solution {
public:
    int jump(vector<int>& nums) {
        int n=nums.size();
        int dp[n];
        memset(dp,10001,sizeof(dp));
        dp[0]=0;
        for(int i=0;i<n-1;i++){
            if(i+nums[i]>=n-1){
                dp[n-1]=min(dp[i]+1,dp[n-1]);
                break;
            }
            for(int j=i+1;j<=i+nums[i];j++) dp[j]=min(dp[j],dp[i]+1);
        }
        return dp[n-1];
    }
}; 

//TC: O(n^2)

//Approach: DP
