//Question: https://leetcode.com/problems/perfect-squares/description/

//Code:
1. RECURSION: TLE

class Solution {
public:
    int solve(int n) {
        if (n == 0) return 0;
        int res = INT_MAX;
        for (int i = 1; i * i <= n; i++) {
            int c = 1 + solve(n - (i * i));
            res = std::min(res, c);
        }
        return res;
    }
    
    int numSquares(int n) {
        return solve(n);
    }
};
_________________________________________

2. MEMO:

class Solution {
public:
    vector<int> dp;
    int solve(int n) {
        if (n == 0) return 0;
        if (dp[n] != -1) return dp[n];
        int res = INT_MAX;
        for (int i = 1; i * i <= n; i++) {
            int c = 1 + solve(n - (i * i));
            res = std::min(res, c);
        }
        return dp[n] = res;
    }
    
    int numSquares(int n) {
        dp.resize(n + 1, -1);
        return solve(n);
    }
};
___________________________________________
3. BOTTOM UP DP:

class Solution {
public:
    int numSquares(int n) {
        vector<int> dp(n + 1, INT_MAX);
        dp[0] = 0;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j * j <= i; j++) {
                dp[i] = std::min(dp[i], dp[i - j * j] + 1);
            }
        }
        return dp[n];
    }
};
____________________________________
FIRST APPROACH:

vector<int>dp(10001,-1);
class Solution {
public:
    int solve(int n){
        if(n==0)    return 0;
        if(dp[n]!=-1) return dp[n];
        int res=1e9;
        for(int i=1;i*i<=n;i++){
            int c=1 + solve(n-(i*i));
            res=min(res,c);
        }
        return dp[n]=res;
    }
    int numSquares(int n) {
        return solve(n);
    }
};

//TC: O(n* sqrt(n))

//Approach: DP
