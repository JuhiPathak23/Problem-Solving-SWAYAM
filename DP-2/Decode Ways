//Question: https://leetcode.com/problems/decode-ways/description/

//Code:
1. RECURSION:

class Solution {
public:
    int solve(string &s, int i, vector<int> &dp) {
        if (i == s.size()) return 1;
        if (i > s.size()) return 0;
        if (s[i] == '0') return 0;
        if (dp[i] != -1) return dp[i];
        int c = 0;
        c += solve(s, i + 1, dp);
        if (stoi(s.substr(i, 2)) <= 26) c += solve(s, i + 2, dp);
        return dp[i] = c;
    }

    int numDecodings(string s) {
        vector<int> dp(s.size(), -1);
        return solve(s, 0, dp);
    }
};
____________________________________________________________
2. MEMO:

class Solution {
public:
    vector<int> dp;

    int solve(string &s, int i) {
        if (i == s.size()) return 1;
        if (i > s.size()) return 0;
        if (s[i] == '0') return 0;
        if (dp[i] != -1) return dp[i];
        int c = 0;
        c += solve(s, i + 1);
        if (stoi(s.substr(i, 2)) <= 26) c += solve(s, i + 2);
        return dp[i] = c;
    }

    int numDecodings(string s) {
        dp = vector<int>(s.size(), -1);
        return solve(s, 0);
    }
};
________________________________________________________________
3. BOTTOM UP DP:

int numDecodings(string s) {
        if (s.empty() || s[0] == '0') return 0;
        vector<int> dp(s.size() + 1, 0);
        dp[0] = 1;
        dp[1] = 1;
        for (int i = 2; i <= s.size(); ++i) {
            if (s[i - 1] != '0') dp[i] += dp[i - 1];
            if (s[i - 2] == '1' || (s[i - 2] == '2' && s[i - 1] <= '6')) dp[i] += dp[i - 2];
        }
        return dp[s.size()];
}

//TC: O(N)

//Approach:  DP
