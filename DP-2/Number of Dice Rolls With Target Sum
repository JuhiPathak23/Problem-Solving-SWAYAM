//Question: https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/description/

//Code:

1. RECURSION: TLE :(((((:(

class Solution {
public:
    int M=1000000007;
    int solve(int n, int k, int target) {
        if(n==0 && target== 0) return 1;
        if(n ==0 || target== 0) return 0;
        int ways=0;
        for(int i = 1;i<=n;i++){
            if(target>=i)   ways=(ways+solve(n-1,k,target-i))%M;
        }
        return ways;
    }

    int numRollsToTarget(int n, int k, int target) {
        return solve(n,k,target);
    }
};
____________________________________________________

2. MEMO:

const int mod = 1e9+7;
class Solution {
public:
vector<vector<int>>dp;
    int call(int n ,int k,int target){
        if(n==0 and target==0){
            return 1;
        }
        else if(n==0 or target==0){
            return 0;
        }
        int &ans = dp[n][target];
        if(ans != -1)
        return ans;
        ans = 0;
        for(int i = 1;i<=k;i++){
            int newtarget = target-i;
            if(newtarget>=0){
                ans +=call(n-1,k,newtarget)%mod;
                ans = ans%mod;
            }
        }
        return ans;
    }
    int numRollsToTarget(int n, int k, int target) {
        dp.resize(n+3,vector<int>(target+5,-1));
        return call(n,k,target);
    }
};

__________________________________________________
3. BOTTOM UP DP:

const int m= 1e9+7;
class Solution {
public:
    int solve(int n, int k, int target) {
        int m = 1000000007;
        vector<vector<int>> dp(n+1,vector<int>(target + 1, 0));
        dp[0][0] = 1;
        for (int i = 1; i <= n; ++i) {
            for (int j = 1; j <= target;j++){
                for (int x= 1; x<= k;x++) {
                    if (x<= j) {
                        dp[i][j]=(dp[i][j]+dp[i-1][j-x])%m;
                    }
                }
            }
        }
        return dp[n][target];
    }

    int numRollsToTarget(int n, int k, int target) {
        return solve(n,k,target);
    }
};

//TC: O(n)

//Approach: DP
