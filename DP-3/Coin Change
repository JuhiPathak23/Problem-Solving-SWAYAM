//Question: https://leetcode.com/problems/coin-change/

//Code:
1. RECURSION: tle :')

class Solution {
private:
    int helper(const vector<int>& coins, int amount) {
        if (amount == 0)    return 0;
        if (amount < 0) return INT_MAX;
        int minCoins = INT_MAX;
        for (int c: coins) {
            int t= helper(coins, amount - c);
            if (t!= INT_MAX)    minCoins = min(minCoins,t + 1);
        }
        return minCoins;
    }
public:
    int coinChange(vector<int>& coins, int amount) {
        int result = helper(coins, amount);
        return result == INT_MAX ? -1 : result;
    }
};
_________________________________
2. MEMO:

class Solution {
private:
    int helper(const vector<int>& coins, int amount, unordered_map<int, int>& memo) {
        if (amount == 0)    return 0;
        if (amount < 0) return -1;
        if (memo.find(amount) != memo.end())    return memo[amount];
        int minCoins = INT_MAX;
        for (int c: coins) {
            int t =helper(coins, amount - c, memo);
            if (t >= 0) minCoins =min(minCoins, t + 1);
        }
        memo[amount] = (minCoins == INT_MAX) ? -1 : minCoins;
        return memo[amount];
    }
public:
    int coinChange(vector<int>& coins, int amount) {
        unordered_map<int, int> memo;
        return helper(coins, amount, memo);
    }
};
_________________________________
3. DP:

class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        vector<int>dp(amount+1,amount+1);
        dp[0]=0;
        for(int i=1;i<=amount;i++){
            for(auto c:coins){
                if((i-c)>=0){
                    dp[i]=min(dp[i],1+dp[i-c]);
                }
            }
        }
        if(dp[amount]!=amount+1)    return dp[amount];
        else    return -1;
    }
};
_________________________________
//TC: O(amount * c)

//Approach:  modified Dijkstra's algo
