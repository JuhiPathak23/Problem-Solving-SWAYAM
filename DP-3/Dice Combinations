//Question: https://cses.fi/problemset/task/1633

//Code:
RECURSION:
#include <iostream>
using namespace std;

const int MOD = 1000000007;

int waysToConstructSum(int n) {
    if (n == 0) return 1;
    if (n < 0) return 0;
    
    int ways = 0;
    for (int i = 1; i <= 6; i++) {
        ways = (ways + waysToConstructSum(n - i)) % MOD;
    }
    return ways;
}

MEMOIZATION:
#include <iostream>
#include <vector>
using namespace std;

const int MOD = 1000000007;

int waysToConstructSum(int n, vector<int>& memo) {
    if (n == 0) return 1;
    if (n < 0) return 0;
    
    if (memo[n] != -1) return memo[n];
    
    int ways = 0;
    for (int i = 1; i <= 6; i++) {
        ways = (ways + waysToConstructSum(n - i, memo)) % MOD;
    }
    memo[n] = ways;
    return ways;
}

DP:
#include <iostream>
#include <vector>
using namespace std;

const int MOD = 1000000007;

int waysToConstructSum(int n) {
    vector<int> dp(n + 1, 0);
    dp[0] = 1;
    
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= 6; j++) {
            if (i - j >= 0) {
                dp[i] = (dp[i] + dp[i - j]) % MOD;
            }
        }
    }
    
    return dp[n];
}
_________________________________

//Approach:  multiple
