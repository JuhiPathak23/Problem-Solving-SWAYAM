//Question: https://leetcode.com/problems/maximum-product-subarray/description/

//Code:
class Solution {
/* RECURSION:
private:
    int helper(vector<int>& nums, int l, int r) {
        if (l==r)   return nums[l];
        int pro=1;
        int maxpro=INT_MIN;
        for (int i=l;i<=r;i++) {
            pro*= nums[i];
            maxpro = max(maxpro, pro);
        }
        int lpro= helper(nums, l+1, r);
        int rpro= helper(nums, l, r-1);
        return max(maxpro, max(lpro, rpro));
    }

public:
    int maxProduct(vector<int>& nums) {
        return helper(nums, 0, nums.size()-1);
    }*/

/* MEMO:
private:
    vector<vector<int>> memo;
    int helper(vector<int>& nums, int l, int r) {
        if (l==r)   return nums[l];
        if (memo[l][r]!=INT_MIN)    return memo[l][r];
        int pro=1;
        int maxpro=INT_MIN;
        for (int i=l;i<=r;i++) {
            pro*=nums[i];
            maxpro= max(maxpro, pro);
        }
        int lpro= helper(nums, l+1, r);
        int rpro= helper(nums, l, r-1);
        memo[l][r] = max(maxpro, max(lpro, rpro));
        return memo[l][r];
    }

public:
    int maxProduct(vector<int>& nums) {
        int n=nums.size();
        memo=vector<vector<int>>(n, vector<int>(n, INT_MIN));
        return helper(nums, 0, n-1);
    }
    
    
    DP:*/

public:
    int maxProduct(vector<int>& nums) {
        int n=nums.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        int maxpro= INT_MIN;
        for (int i=0;i<n;i++) {
            dp[i][i] = nums[i];
            maxpro= max(maxpro, dp[i][i]);
        }
        for (int l=2;l<=n;l++) {
            for (int i=0;i<=n-l;i++) {
                int j=i+l-1;
                dp[i][j] = dp[i][j-1] * nums[j];
                maxpro= max(maxpro, dp[i][j]);
            }
        }
        return maxpro;
    }
};
_________________________________
//TC: O(n*n) in dp

//Approach:  multiple
