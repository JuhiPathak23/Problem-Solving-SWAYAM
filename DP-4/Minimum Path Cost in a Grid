//Question: https://leetcode.com/problems/minimum-path-cost-in-a-grid/

//Code:
class Solution {
public:
    int minPathCost(vector<vector<int>>& grid, vector<vector<int>>& moveCost) {
        int m=grid.size();
        int n=grid[0].size();
        int dp[m+1][n+1];
        for(int i=0;i<n;i++)    dp[m-1][i]=grid[m-1][i];
        for(int i=m-2;i>=0;i--){
            for(int j=0;j<n;j++){
                int res=INT_MAX;
                for(int k=0;k<n;k++)    res=min(res,dp[i+1][k]+moveCost[grid[i][j]][k]);
                dp[i][j]=res+grid[i][j];
            }
        }
        int res=INT_MAX;
        for(int i=0;i<n;i++)    res = min(res,dp[0][i]); 
        return res;
    }
};
___________________________________

//TC: O(N^3)

//Approach:  DP
