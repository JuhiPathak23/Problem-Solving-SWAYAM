//Question: https://leetcode.com/problems/minimum-path-sum/

//Code:
class Solution {
public:
    int solve(vector<vector<int>>&v,int i,int j,vector<vector<int>>& memo){
        if(i==0 && j==0) return v[0][0];
        if(i<0 || j<0) return INT_MAX;
        if(memo[i][j]!=INT_MAX) return memo[i][j];
        memo[i][j]=v[i][j] + min(solve(v,i-1,j,memo),solve(v,i,j-1,memo));
        return memo[i][j];
    }
    int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size(),n=grid[0].size();
        vector<vector<int>> memo(m,vector<int>(n,INT_MAX));
        return solve(grid,m-1,n-1,memo);
    }
    
    
    /* RECURSION: but with TLE :((
    int solve(vector<vector<int>>& v,int i,int j) {
        if(i==0 && j==0) return v[0][0];
        if(i<0 || j<0) return INT_MAX;
        return v[i][j] + min(solve(v,i-1,j),solve(v,i,j-1));
    }
    int minPathSum(vector<vector<int>>& grid) {
        return solve(grid,grid.size()-1,grid[0].size()-1);
    } */
    
    /* BOTTOM UP DP:

    int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size(),n=grid[0].size();
        int i=0,j=0;
        for(i=1;i<m;i++)
            grid[i][0]+=grid[i-1][0];
        for(j=1;j<n;j++)
            grid[0][j]+=grid[0][j-1];
        for(i=1;i<m;i++){
            for(j =1;j<n;j++)
                grid[i][j]=min(grid[i-1][j],grid[i][j-1])+grid[i][j];
        }
        return grid[m-1][n-1];
    }*/
};
___________________________________

//Approach:  multiple
