//Question: https://leetcode.com/problems/dungeon-game/

//Code:
class Solution {
public:
/*MEMOIZATION: accepted :) */
    int solve(vector<vector<int>>& v,int i,int j,int m,int n,vector<vector<int>>& memo) {
        if(i==m-1 && j==n-1)    return max(1,1-v[i][j]);
        if(memo[i][j]!=INT_MIN) return memo[i][j];
        int right=(j==n-1)?INT_MAX:solve(v,i,j+1,m,n,memo);
        int down=(i==m-1)?INT_MAX:solve(v,i+1,j,m,n,memo);
        int mh=min(right,down)-v[i][j];
        memo[i][j]=max(1,mh);
        return memo[i][j];
    }
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        int m=dungeon.size(),n=dungeon[0].size();
        vector<vector<int>>memo(m,vector<int>(n,INT_MIN));
        return solve(dungeon,0,0,m,n,memo);
    }

    
/* RECURSION: TLE :(
    int solve(vector<vector<int>>& v,int i,int j,int m,int n){
        if(i==m-1 && j==n-1)    return max(1,1-v[i][j]);
        int right=(j==n-1)?INT_MAX:solve(v,i,j+1,m,n);
        int down=(i==m-1)?INT_MAX:solve(v,i+1,j,m,n);
        int mh=min(right,down)-v[i][j];
        return max(1,mh);
    }
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        int m=dungeon.size(),n=dungeon[0].size();
        return solve(dungeon,0,0,m,n);
    }*/

/* DP:
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        int m=dungeon.size(),n=dungeon[0].size();
        vector<vector<int>>dp(m+1,vector<int>(n+1,INT_MAX));
        for(auto& row:dp){
            fill(row.begin(),row.end(),INT_MAX);
        }
        dp[m][n-1]=dp[m-1][n]=1;
        for(int i=m-1;i>=0;i--){
            for(int j=n-1;j>=0;j--){
                dp[i][j]= max(1,min(dp[i+1][j],dp[i][j+1])-dungeon[i][j]);
            }
        }
        return dp[0][0];
    }*/
};

//Approach:  multiple approaches
