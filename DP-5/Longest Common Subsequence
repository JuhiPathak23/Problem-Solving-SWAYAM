//Question: https://leetcode.com/problems/longest-common-subsequence/

//Code:

class Solution {
public:
    /* RECURSION
    int solve(string &text1,string &text2,int i,int j){
        if(i==0 || j==0)    return 0;
        if(text1[i-1]==text2[j-1])  return solve(text1,text2,i-1,j-1)+1;
        else    return max(solve(text1,text2,i,j-1), solve(text1,text2,i-1,j));
    }
 
    int longestCommonSubsequence(string text1, string text2) {
        int n1=text1.size(),n2=text2.size();
        return solve(text1,text2,n1,n2);
    }*/

/* MEMO
    int solve(string &text1,string &text2,int i,int j,vector<vector<int>>&dp){
        if(i==0 || j==0)    return 0;
        if(dp[i][j]!=-1)    return dp[i][j];
        if(text1[i-1]==text2[j-1])
            return dp[i][j] =solve(text1,text2,i-1,j-1,dp)+1;
        else
            return dp[i][j] = max(solve(text1,text2,i,j-1,dp), solve(text1,text2,i-1,j,dp));
    }
    int longestCommonSubsequence(string text1, string text2) {
        int n1=text1.size(),n2=text2.size();
        vector<vector<int>> dp(n1+1,vector<int>(n2 +1,-1));
        return solve(text1,text2,n1,n2,dp);
    }*/

    int longestCommonSubsequence(string text1, string text2) {
        int n1 = text1.size(), n2 = text2.size();
        vector<vector<int>> dp(n1 + 1, vector<int>(n2 + 1, 0));
        
        for (int i = 1; i <= n1; i++) {
            for (int j = 1; j <= n2; j++) {
                if (text1[i - 1] == text2[j - 1])
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                else
                    dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]);
            }
        }
        
        return dp[n1][n2];
    }
};

//Approach:  multiple approaches
