//Question: https://www.geeksforgeeks.org/maximum-profit-sale-wines/

//Code:
#include <bits/stdc++.h>
using namespace std;
#define N 1000
int dp[N][N];
int sell[N][N];
int solve(int price[], int begin,int end, int n) {
	if (dp[begin][end] != -1)  return dp[begin][end];
	int year = n - (end - begin);
	if (begin == end) return year * price[begin]; 
	int x = price[begin] * year + solve(price, begin + 1, end, n);
	int y = price[end] * year + solve(price, begin, end - 1, n);
	int ans = max(x, y);
	dp[begin][end] = ans;
	if (x >= y)  sell[begin][end] = 0;
	else  sell[begin][end] = 1;
	return ans;
}
int maxProfit(int price[], int n) {
	for (int i = 0; i < N; i++){
		for (int j = 0; j < N; j++)  dp[i][j] = -1;
  }
	int ans = solve(price, 0, n - 1, n);
	int i = 0, j = n - 1;
	while (i <= j) {
		if (sell[i][j] == 0) {
			cout << "beg ";
			i++;
		} else {
			cout << "end ";
			j--;
		}
	}
	cout << endl;
	return ans;
}

//TC: O(N*N)
//Approach:  DP
