//Question: https://leetcode.com/problems/wildcard-matching/

//Code:
class Solution {
public:
    bool isMatch(string s, string p) {
        int n = size(s), m = size(p);
        vector<vector<int>> dp(n,vector<int>(m,-1));
        function<bool(int,int)> helper = [&](int i,int j) -> bool {
            if(i==-1 && j==-1) return true;
            if(j==-1) return false;
            if(i==-1) return p[j]=='*'&& helper(i,j-1);
            if(dp[i][j]!=-1) return dp[i][j];
            dp[i][j] = 0;
            if(s[i]==p[j]||p[j]=='?') return dp[i][j] = helper(i-1,j-1);
            if(p[j]!='*') return dp[i][j] = false;
            return dp[i][j] = helper(i-1,j)||helper(i,j-1);
        };
        return helper(n-1,m-1);
    }
};

//TC: O(N*M)
//Approach:  recursive memoized
