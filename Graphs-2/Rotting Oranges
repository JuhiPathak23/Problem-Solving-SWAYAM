//Question: https://leetcode.com/problems/rotting-oranges/

//Code:
class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int m=grid.size(),n=grid[0].size();
        int res=0,c=0,o=0;
        queue<pair<int,int>>rotten;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]!=0)   o++;
                if(grid[i][j]==2)   rotten.push({i,j});
            }
        }          
        int dx[4]={0,0,1,-1};
        int dy[4]={1,-1,0,0};
        while(!rotten.empty()){
            int k=rotten.size();
            c+=k;
            while(k--){
                int x=rotten.front().first;
                int y=rotten.front().second;
                rotten.pop();
                for(int i=0;i<4;i++){
                    int newx=x+dx[i];
                    int newy=y+dy[i];
                    if(newx<0 || newx>=m || newy<0 || newy>=n || grid[newx][newy]!=1){continue;}
                    grid[newx][newy]=2;
                    rotten.push({newx,newy});
                }
            }
            if(!rotten.empty()) res++;
        }  
        if(o==c)  return res;
        return -1;
    }
};

//TC: O(M*N)

//Approach: BFS
