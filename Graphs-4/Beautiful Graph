//Question: https://codeforces.com/problemset/problem/1093/D

//Code:
#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
typedef unsigned long long int ull;
const int N = 300010;
const int inf = 100000000;

const int mod = 998244353;
using namespace std;
bool f;
int color[N];
ll co[2], p[N];
vector<int> adj[N];
void dfs(int s, int c){
	if (f)  return;
	color[s] = c;
	co[c]++;
	for (int e : adj[s]){
		if (color[e] == -1)
			dfs(e, 1 - c);
		else if (color[e] == c) {
			f = true;
			return;
		}
	}
}

int main(){
	int i, j, k;
	int n, m, t;
	int u, v;
	p[0] = 1;
	for (i = 1; i < N; i++)
		p[i] = (2 * p[i - 1]) % mod;
	cin >> t;
	while(t--){
	    cin >> n >> m;
		for (i = 1; i <= n; i++)
		    adj[i].clear(), color[i] = -1;
		for (i = 0; i < m; i++){
			cin >> u >> v;
			adj[u].push_back(v);
			adj[v].push_back(u);
		}
		ll cnt = 1, cnt2;
		for (i = 1; i <= n; i++){
			if (color[i] == -1){
				f = false;
				co[0] = co[1] = 0;
				dfs(i, 0);
				if (f)
					break;
				cnt2 = (p[co[0]] + p[co[1]]);
				cnt2 %= mod;
				cnt = (cnt * cnt2) % mod;
			}
		}
		if (!f) cout << cnt << endl;
		else    cout << 0 << endl;
	}
	return 0;
}

//TC: O(V+E)

//Approach: DFS
