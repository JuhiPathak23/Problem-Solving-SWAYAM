//Question: https://leetcode.com/problems/clone-graph/

//Code:
/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    unordered_map<int,Node*>m;
    Node* cloneGraph(Node* node) {
        if(node==NULL)  return NULL;
        if(m.find(node->val)!=m.end())  return m[node->val];
        Node *head=new Node(node->val);
        m[node->val]=head;
        for(Node *x:node->neighbors){
            Node *c=cloneGraph(x);
            head->neighbors.push_back(c);
        }
        return head;      
    }
};

//TC: O(V+E)

//Approach: DFS
