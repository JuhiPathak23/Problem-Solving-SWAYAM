//Question: https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/description/

//Code:
class Solution {
public:
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        vector<vector<pair<int,int>>>graph(n);
        for(int i=0;i <edges.size();i++){
            graph[edges[i][0]].push_back({edges[i][1], edges[i][2]});
            graph[edges[i][1]].push_back({edges[i][0], edges[i][2]});
        }
        int res=INT_MAX,node=-1;
        for(int i=0;i<n;i++){
            vector<int>v(n,INT_MAX);
            priority_queue<pair<int,int>,vector<pair<int,int>>, greater<pair<int,int>>>pq;
            pq.push({0,i});
            v[i]=0;
            while(!pq.empty()){
                pair<int,int>front=pq.top();
                pq.pop();
                for(pair<int,int>i:graph[front.second]){
                    if(v[i.first]>front.first + i.second){
                        v[i.first] = front.first + i.second;
                        pq.push({v[i.first], i.first});
                    }
                } 
            }
            int temp=0;
            for(int i = 0; i < n; i++){
                if(v[i]!=INT_MAX && v[i] <= distanceThreshold)
                    temp++;
            }
            if(temp<= res){
                res =temp;
                node = i;
            }
        }
        return node;
    }
};

//TC: O(V*(E+V log V))

//Approach:  Dijkstra's
