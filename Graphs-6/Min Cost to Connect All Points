//Question: https://leetcode.com/problems/min-cost-to-connect-all-points/description/

//Code:
class Solution {
public:
    int minCostConnectPoints(vector<vector<int>>& points) {
        int n=points.size(),mc=0;
        vector<bool>v(n,false);
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        unordered_map<int,int>mp;
        pq.push({0,0});
        while(!pq.empty()){
            auto e=pq.top();
            pq.pop();
            int cost=e.first;
            int u=e.second;
            if(v[u])    continue;
            v[u]=true;
            mc+=cost;
            for(int i=0;i<n;i++){
                if(!v[i]){
                    int d=abs(points[u][0]-points[i][0])+abs(points[u][1]-points[i][1]);
                    if(mp.find(i)==mp.end() || d<mp[i]){
                        mp[i]=d;
                        pq.push({d,i});
                    }
                }
            }
        }
        return mc;
    }
};

//TC: O(n^2 * log n)

//Approach:  using Prim's algorithm
