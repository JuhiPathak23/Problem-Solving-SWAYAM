//Question: https://leetcode.com/problems/process-restricted-friend-requests/

//Code:
class UnionFind {
public:
    vector<int> parent;
    UnionFind(int n) {
        parent.resize(n + 1, -1);
    }
    int find(int x) {
        int root = x;
        while (parent[root] >= 0) {
            root = parent[root];
        }
        while (parent[x] >= 0) {
            int next = parent[x];
            parent[x] = root;
            x = next;
        }
        return root;
    }
    void join(int x, int y) {
        int root1 = find(x);
        int root2 = find(y);
        if (root1 == root2) return;
        if (parent[root1] < parent[root2]) {
            parent[root1] += parent[root2];
            parent[root2] = root1;
        } else {
            parent[root2] += parent[root1];
            parent[root1] = root2;
        }
    }
};

class Solution {
public:
    vector<bool> friendRequests(int n, vector<vector<int>>& restrictions, vector<vector<int>>& requests) {
        int m = requests.size();
        vector<bool> res(m, 0);
        UnionFind unionfind(n);
        for(int i = 0; i < m; i++) {
            UnionFind temp = unionfind;
            temp.join(requests[i][0], requests[i][1]);
            bool flag = true;
            for(vector<int>& v : restrictions) {
                if(temp.find(v[0]) == temp.find(v[1])) {
                    flag = false;
                    break;
                }
            }
            if(flag) {
                res[i] = true;
                unionfind.join(requests[i][0], requests[i][1]);
            }
        }
        return res;
    }
};

//TC: O(N*func(N)*M)

//Approach:  DSU
