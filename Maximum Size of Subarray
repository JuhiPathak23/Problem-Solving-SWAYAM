//Question: You have given an array A having N elements and an integer S. You have to find a maximum number X such that the sum of all its subarrays of size X is less than or equal to S.
Example Input:  
    A = [1, 3, 4, 2]  
    S = 7  
Example Output:  
    2  
Explanation:  
    All subarrays of size 2 have the sum less than 7.  
    Subarays are :  
    1. [1, 3]  
    2. [3, 4]  
    3. [4, 2]  

//Code:
#include <iostream>
#include <vector>
using namespace std;

bool func(vector<int>& A,int X,int S){
    int total=0;
    for(int i=0;i<X;i++)    total+=A[i];
    if(total<=S) return true;
    for(int i=X;i<A.size();i++){
        total+=A[i]-A[i-X];
        if(total<=S) return true;
    }
    return false;
}

int solve(vector<int>& A,int S){
    int low =1,high =A.size(),res=0;
    while(low<=high){
        int mid=(low+high)/2;
        if(func(A,mid,S)){
            low=mid+1;
            res=mid;
        }
        else{
            high=mid-1;
        }
    }
    return res;
}

int main() {
    int N,S;
    cout<<"Enter size: ";
    cin>>N;
    vector<int>A(N);
    cout<<"Enter elements: ";
    for(int i=0;i<N;i++)   cin>>A[i];
    cout<<"Enter S:";
    cin>>S;
    cout<<"value of X: "<<solve(A,S)<<endl;
    return 0;
}

//TC: O(N log N)

//Approach: Binary Search
