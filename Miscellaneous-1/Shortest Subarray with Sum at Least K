//Question: https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/description/

//Code:
class Solution {
public:
    int shortestSubarray(vector<int>& nums, int k) {
        int n=nums.size(),res=n+1;
        vector<long long>v(n);
        deque<int>dq;
        for(int i=0;i<n;i++){
            v[i]=nums[i];
            if(i) v[i]+=v[i-1];
            if(v[i]>=k) res=min(res,i+1);
            while(!dq.empty() && v[i]-v[dq.front()]>=k){
                res=min(res,i-dq.front());
                dq.pop_front();
            }
            while(!dq.empty() && v[dq.back()]>=v[i]){
                dq.pop_back();
            }
            dq.push_back(i);
        }
        return (res==n+1)?-1:res;
    }
};

//TC: O(n)

//Approach:  Sliding Window with deque
