//Question: https://leetcode.com/problems/evaluate-division/description/

//Code:
class Solution {
public:
    //DFS to find path
    void helper(vector<unordered_map<int,double>>& edges, int sv,int e, vector<bool>& visited, double current,double& finalans ){
           if(edges[sv].count(e)>0){
                 current*=edges[sv][e];
                 finalans=current;
                 return;
           }
           visited[sv]=true;
           for(auto i : edges[sv]){
               if(visited[i.first]) continue;
               helper(edges,i.first,e,visited,current*i.second,finalans);
           }
    }

    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        vector<double> ans;

        unordered_map<string,int> vertices;

        int index=0;
        for(int i=0;i<equations.size();i++){
            if(vertices.count(equations[i][0])==0) 
            vertices[equations[i][0]]=index++;

            if(vertices.count(equations[i][1])==0) 
            vertices[equations[i][1]]=index++;
        }
        vector<unordered_map<int,double>> edges(vertices.size());


        for(int i=0;i<equations.size();i++){
            
            edges[vertices[equations[i][0]]][vertices[equations[i][1]]]=values[i];
            if(values[i]!=0) edges[vertices[equations[i][1]]][vertices[equations[i][0]]]=(1/values[i]);
        }

        
        for(int i=0;i<queries.size();i++){
            if(vertices.count(queries[i][0])==0 || vertices.count(queries[i][1])==0){
                ans.push_back(double(-1));
                continue;
            }
            vector<bool> visited(vertices.size(),false);
            double finalans=-1;
            helper(edges,vertices[queries[i][0]],vertices[queries[i][1]],visited,1,finalans);
            ans.push_back(finalans);
        }

        return ans;
    }
};

//TC: O(V+E+Q)

//Approach:  DFS with Memo
