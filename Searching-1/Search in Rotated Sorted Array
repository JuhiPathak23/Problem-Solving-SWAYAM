//Question: https://leetcode.com/problems/search-in-rotated-sorted-array/description/

//Code:
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int low=0,high=nums.size()-1;
        int mid;
        while(low<=high){
            mid=(high+low)/2;
            if(nums[mid]==target) return mid;
            else if(nums[low]<=nums[mid]){
                if(target>=nums[low] && target<=nums[mid])    high=mid-1;
                else    low=mid+1;
            }
            else{
                if(target>=nums[mid] && target<=nums[high])    low=mid+1;
                else    high=mid-1;
            }
        }
        return -1;
    }
};

//TC: O(log N)

//Approach: Here I have used binary search to find a specific number in a sorted array. It's like searching for a number in a phone book, but this method is faster.
//First, it sets up two markers at the beginning and end of the array to figure out where to start and stop searching.
//Then, it keeps dividing the array in half and checks if the middle number is the one we're looking for. If it is, great! It tells us where it was found.
//If not, it looks at the numbers on the left and right halves of the array to decide where to continue searching.
//It repeats this process until it finds the number or realizes it's not there.
//This method is really good because it quickly narrows down where to look, making the search much faster, especially for large arrays.
