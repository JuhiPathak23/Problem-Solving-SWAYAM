//Question: https://leetcode.com/problems/search-in-rotated-sorted-array-ii/description/

//Code:
class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int low=0,high=nums.size()-1,res=0,mid;
        int n=nums.size()-1;
        while(low<=high){
            mid=(low+high)/2;
            if(target==nums[mid])   return true;
            if(nums[low]==nums[mid] && nums[high]==nums[mid]){
                low++;
                high--;
            }
            else if(nums[mid]>nums[high]){
                if(target>nums[mid] || target<nums[0]) low=mid+1;
                else    high=mid-1;
            }
            else{
                if(target<nums[mid] || target>nums[high])   high=mid-1;
                else    low=mid+1;
            }
        }  
        return false;
    }
};

//TC: O(log N)

//Approach: Binary Search
