//Question: https://www.geeksforgeeks.org/problems/aggressive-cows/1

//Code:
class Solution {
public:
    bool canplace(int n,int k,int m,vector<int>stalls){
        int numc=1;
        int lc=stalls[0];
        for(int i=1;i<n;i++){
            if(stalls[i]-lc>=m){
                numc++;
                lc=stalls[i];
            }
        }
        if(numc>=k) return true;
        return false;
    }
    
    int solve(int n, int k, vector<int> &stalls) {
    
        // Write your code here
        sort(stalls.begin(),stalls.end());
        int low=0,high=stalls[n-1]-stalls[0],res=-1;
        int mid=(low+high)/2;
        while(low<=high){
            if(canplace(n,k,mid,stalls)){
                res=mid;
                low=mid+1;
            }
            else    high=mid-1;
            mid=(low+high)/2;
        }
        return res;
    }
};

//TC: O(n log d); d=distance to the last stall from the initial first stall

//Approach: Here I have used binary search approach on range.
