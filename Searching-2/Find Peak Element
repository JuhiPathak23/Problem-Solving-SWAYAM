//Question: https://leetcode.com/problems/find-peak-element/description/

//Code:
class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int n=nums.size();
        int low=0,high=n-1;
        if(n==1) return 0;
        if(nums[0]>nums[1]) return 0;
        else if(nums[n-1]>nums[n-2]) return n-1;
        else{
            while(low<=high){
                int mid=(low+high)/2;
                if(mid>0 && mid<n && (nums[mid-1]<nums[mid] && nums[mid]>nums[mid+1]))  return mid;
                else{
                    if(nums[mid]<nums[mid+1])  low=mid+1;
                    else  high=mid-1;
                }
            }
        }
        return -1;
    }
};

//TC: O(log N)

//Approach: Here I have used binary search approach.
