//Question: https://leetcode.com/problems/find-bottom-left-tree-value/description/

//Code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {
        int b=0;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            int count=q.size();
            for(int i=0;i<count;i++){
                TreeNode* cur=q.front();
                q.pop();
                if(i==0)    b=cur->val; 
                if(cur->left)  q.push(cur->left);
                if(cur->right) q.push(cur->right);
            }
        }
        return b;
    }
};

//TC: O(n)

//Approach: BFS
