//Question: https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/description/

//Code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    map<int,map<int,vector<int>>>mp;
    void level(int r,int c,TreeNode* root){
        mp[c][r].push_back(root->val);
        if(root->left!=NULL)    level(r+1,c-1,root->left);
        if(root->right!=NULL)   level(r+1,c+1,root->right);
    }
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        level(0,0,root);
        vector<vector<int>>res(mp.size());
        int i=0;
        for(auto c:mp){
            vector<int>v;
            for(auto r:c.second){
                sort(r.second.begin(),r.second.end());
                v.insert(v.end(),r.second.begin(),r.second.end());
            }
            res[i++]=v;
        }
        return res;
    }
};

//TC: O(n*log n)

//Approach: Recursion and sorting
