//Question: https://leetcode.com/problems/diameter-of-binary-tree/

//Code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int height(TreeNode* root) {
        if(root==NULL)   return 0;
        int l=height(root->left);
        int r=height(root->right);
        int h=max(l,r)+1;
        return h;
    }

    int diameterOfBinaryTree(TreeNode* root) {
        if(root==NULL)   return 0;
        int l=diameterOfBinaryTree(root->left); 
        int r=diameterOfBinaryTree(root->right); 
        int d1=height(root->left) + height(root->right);
        int d2=max(l,r);
        return max(d1,d2);
    }
};

//TC: O(n*n)

//Approach: DFS
