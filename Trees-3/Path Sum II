//Question: https://leetcode.com/problems/path-sum-ii/

//Code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>>res;
    void solve(TreeNode* root,int t,vector<vector<int>> &v,vector<int>temp,int s){
        if(root == NULL)    return;
        s+=root->val;
        temp.push_back(root->val);
        if(root->left == NULL && root->right==NULL && s==t){
            v.push_back(temp);
            return;
        }
        solve(root->left,t,v,temp,s);
        solve(root->right,t,v,temp,s);
    }

    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        if(root==NULL)  return res;
        vector<int>t;
        solve(root,targetSum,res,t,0);
        return res;
    }
};

//TC: O(n)

//Approach: DFS
