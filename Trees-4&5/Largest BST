//Question: https://www.geeksforgeeks.org/problems/largest-bst/1

//Code:
class Solution{
    public:
    /*You are required to complete this method */
    // Return the size of the largest sub-tree which is also a BST
    vector<int> solve(Node* root){
        if(root==NULL)  return {INT_MAX,INT_MIN,0};    
        if(root->left==NULL && root->right==NULL)   return {root->data,root->data,1};
        vector<int>l,r;
        l=solve(root->left);
        r=solve(root->right);
        if(l[1]<root->data && r[0]>root->data)   return {min(l[0],root->data),max(r[1],root->data),l[2]+r[2]+1};
        else    return {INT_MIN,INT_MAX,max(l[2],r[2])};
    }
    
    int largestBst(Node *root)
    {
    	//Your code here
    	return solve(root)[2];
    }
};

//TC: O(n)

//Approach: DFS
