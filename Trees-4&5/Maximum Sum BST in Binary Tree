//Question: https://leetcode.com/problems/maximum-sum-bst-in-binary-tree/description/

//Code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int solve(TreeNode *root,int &res,int &mn,int &mx){
        if(root==NULL) {
            mn=INT_MAX;
            mx=INT_MIN;
            return 0;
        }
        int lowmn, highmn, lowmx, highmx;
        lowmn = highmn = INT_MAX;
        lowmx = highmx = INT_MIN;
        int l = solve(root->left, res, lowmn, lowmx);
        int r = solve(root->right, res, highmn, highmx);
        int val = root->val + l + r;
        if ((lowmx < root->val) && (highmn > root->val)) {
            res = max(res, val);
            mn = min(lowmn, root->val);
            mx = max(highmx, root->val);
        }
        else{
            mn = INT_MIN;
            mx = INT_MAX;
        }
        return val;
    }
    int maxSumBST(TreeNode* root) {
        int res=0;
        int mn=INT_MAX,mx=INT_MIN;
        solve(root,res,mn,mx);
        return res;
    }
};


//TC: O(n)

//Approach: Depth-First Search (DFS) with Post-order Traversal and Range Constraint
